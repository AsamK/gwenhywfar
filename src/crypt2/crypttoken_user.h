/* This file is auto-generated from "crypttoken_user.xml" by the typemaker
   tool of Gwenhywfar. 
   Do not edit this file -- all changes will be lost! */
#ifndef CRYPTTOKEN_USER_H
#define CRYPTTOKEN_USER_H

/** @page P_GWEN_CRYPTTOKEN_USER_PUBLIC GWEN_CryptToken_User (public)
This page describes the properties of GWEN_CRYPTTOKEN_USER
@anchor GWEN_CRYPTTOKEN_USER_Id
<h3>Id</h3>
<p>
</p>
<p>
Set this property with @ref GWEN_CryptToken_User_SetId, 
get it with @ref GWEN_CryptToken_User_GetId
</p>

@anchor GWEN_CRYPTTOKEN_USER_ServiceId
<h3>ServiceId</h3>
<p>
For Homebanking this is the bank code</p>
<p>
Set this property with @ref GWEN_CryptToken_User_SetServiceId, 
get it with @ref GWEN_CryptToken_User_GetServiceId
</p>

@anchor GWEN_CRYPTTOKEN_USER_UserId
<h3>UserId</h3>
<p>
</p>
<p>
Set this property with @ref GWEN_CryptToken_User_SetUserId, 
get it with @ref GWEN_CryptToken_User_GetUserId
</p>

@anchor GWEN_CRYPTTOKEN_USER_UserName
<h3>UserName</h3>
<p>
</p>
<p>
Set this property with @ref GWEN_CryptToken_User_SetUserName, 
get it with @ref GWEN_CryptToken_User_GetUserName
</p>

@anchor GWEN_CRYPTTOKEN_USER_PeerId
<h3>PeerId</h3>
<p>
</p>
<p>
Set this property with @ref GWEN_CryptToken_User_SetPeerId, 
get it with @ref GWEN_CryptToken_User_GetPeerId
</p>

@anchor GWEN_CRYPTTOKEN_USER_PeerName
<h3>PeerName</h3>
<p>
</p>
<p>
Set this property with @ref GWEN_CryptToken_User_SetPeerName, 
get it with @ref GWEN_CryptToken_User_GetPeerName
</p>

@anchor GWEN_CRYPTTOKEN_USER_Address
<h3>Address</h3>
<p>
</p>
<p>
Set this property with @ref GWEN_CryptToken_User_SetAddress, 
get it with @ref GWEN_CryptToken_User_GetAddress
</p>

@anchor GWEN_CRYPTTOKEN_USER_Port
<h3>Port</h3>
<p>
</p>
<p>
Set this property with @ref GWEN_CryptToken_User_SetPort, 
get it with @ref GWEN_CryptToken_User_GetPort
</p>

@anchor GWEN_CRYPTTOKEN_USER_SystemId
<h3>SystemId</h3>
<p>
</p>
<p>
Set this property with @ref GWEN_CryptToken_User_SetSystemId, 
get it with @ref GWEN_CryptToken_User_GetSystemId
</p>

@anchor GWEN_CRYPTTOKEN_USER_ContextId
<h3>ContextId</h3>
<p>
</p>
<p>
Set this property with @ref GWEN_CryptToken_User_SetContextId, 
get it with @ref GWEN_CryptToken_User_GetContextId
</p>

*/
#ifdef __cplusplus
extern "C" {
#endif

typedef struct GWEN_CRYPTTOKEN_USER GWEN_CRYPTTOKEN_USER;

#ifdef __cplusplus
} /* __cplusplus */
#endif

#include <gwenhywfar/db.h>
#include <gwenhywfar/misc.h>
#include <gwenhywfar/list2.h>
#include <gwenhywfar/types.h>

#ifdef __cplusplus
extern "C" {
#endif

GWEN_LIST_FUNCTION_LIB_DEFS(GWEN_CRYPTTOKEN_USER, GWEN_CryptToken_User, GWENHYWFAR_API)
GWEN_CRYPTTOKEN_USER_LIST *GWEN_CryptToken_User_List_dup(const GWEN_CRYPTTOKEN_USER_LIST *stl);

GWEN_LIST2_FUNCTION_LIB_DEFS(GWEN_CRYPTTOKEN_USER, GWEN_CryptToken_User, GWENHYWFAR_API)

/** Destroys all objects stored in the given LIST2 and the list itself
*/
GWENHYWFAR_API void GWEN_CryptToken_User_List2_freeAll(GWEN_CRYPTTOKEN_USER_LIST2 *stl);
/** Creates a deep copy of the given LIST2.
*/
GWENHYWFAR_API GWEN_CRYPTTOKEN_USER_LIST2 *GWEN_CryptToken_User_List2_dup(const GWEN_CRYPTTOKEN_USER_LIST2 *stl);

/** Creates a new object.
*/
GWENHYWFAR_API GWEN_CRYPTTOKEN_USER *GWEN_CryptToken_User_new();
/** Destroys the given object.
*/
GWENHYWFAR_API void GWEN_CryptToken_User_free(GWEN_CRYPTTOKEN_USER *st);
/** Increments the usage counter of the given object, so an additional free() is needed to destroy the object.
*/
GWENHYWFAR_API void GWEN_CryptToken_User_Attach(GWEN_CRYPTTOKEN_USER *st);
/** Creates and returns a deep copy of thegiven object.
*/
GWENHYWFAR_API GWEN_CRYPTTOKEN_USER *GWEN_CryptToken_User_dup(const GWEN_CRYPTTOKEN_USER*st);
/** Creates an object from the data in the given GWEN_DB_NODE
*/
GWENHYWFAR_API GWEN_CRYPTTOKEN_USER *GWEN_CryptToken_User_fromDb(GWEN_DB_NODE *db);
/** Stores an object in the given GWEN_DB_NODE
*/
GWENHYWFAR_API int GWEN_CryptToken_User_toDb(const GWEN_CRYPTTOKEN_USER*st, GWEN_DB_NODE *db);
/** Returns 0 if this object has not been modified, !=0 otherwise
*/
GWENHYWFAR_API int GWEN_CryptToken_User_IsModified(const GWEN_CRYPTTOKEN_USER *st);
/** Sets the modified state of the given object
*/
GWENHYWFAR_API void GWEN_CryptToken_User_SetModified(GWEN_CRYPTTOKEN_USER *st, int i);

/**
* Returns the property @ref GWEN_CRYPTTOKEN_USER_Id
*/
GWENHYWFAR_API GWEN_TYPE_UINT32 GWEN_CryptToken_User_GetId(const GWEN_CRYPTTOKEN_USER *el);
/**
* Set the property @ref GWEN_CRYPTTOKEN_USER_Id
*/
GWENHYWFAR_API void GWEN_CryptToken_User_SetId(GWEN_CRYPTTOKEN_USER *el, GWEN_TYPE_UINT32 d);

/**
* Returns the property @ref GWEN_CRYPTTOKEN_USER_ServiceId
*/
GWENHYWFAR_API const char *GWEN_CryptToken_User_GetServiceId(const GWEN_CRYPTTOKEN_USER *el);
/**
* Set the property @ref GWEN_CRYPTTOKEN_USER_ServiceId
*/
GWENHYWFAR_API void GWEN_CryptToken_User_SetServiceId(GWEN_CRYPTTOKEN_USER *el, const char *d);

/**
* Returns the property @ref GWEN_CRYPTTOKEN_USER_UserId
*/
GWENHYWFAR_API const char *GWEN_CryptToken_User_GetUserId(const GWEN_CRYPTTOKEN_USER *el);
/**
* Set the property @ref GWEN_CRYPTTOKEN_USER_UserId
*/
GWENHYWFAR_API void GWEN_CryptToken_User_SetUserId(GWEN_CRYPTTOKEN_USER *el, const char *d);

/**
* Returns the property @ref GWEN_CRYPTTOKEN_USER_UserName
*/
GWENHYWFAR_API const char *GWEN_CryptToken_User_GetUserName(const GWEN_CRYPTTOKEN_USER *el);
/**
* Set the property @ref GWEN_CRYPTTOKEN_USER_UserName
*/
GWENHYWFAR_API void GWEN_CryptToken_User_SetUserName(GWEN_CRYPTTOKEN_USER *el, const char *d);

/**
* Returns the property @ref GWEN_CRYPTTOKEN_USER_PeerId
*/
GWENHYWFAR_API const char *GWEN_CryptToken_User_GetPeerId(const GWEN_CRYPTTOKEN_USER *el);
/**
* Set the property @ref GWEN_CRYPTTOKEN_USER_PeerId
*/
GWENHYWFAR_API void GWEN_CryptToken_User_SetPeerId(GWEN_CRYPTTOKEN_USER *el, const char *d);

/**
* Returns the property @ref GWEN_CRYPTTOKEN_USER_PeerName
*/
GWENHYWFAR_API const char *GWEN_CryptToken_User_GetPeerName(const GWEN_CRYPTTOKEN_USER *el);
/**
* Set the property @ref GWEN_CRYPTTOKEN_USER_PeerName
*/
GWENHYWFAR_API void GWEN_CryptToken_User_SetPeerName(GWEN_CRYPTTOKEN_USER *el, const char *d);

/**
* Returns the property @ref GWEN_CRYPTTOKEN_USER_Address
*/
GWENHYWFAR_API const char *GWEN_CryptToken_User_GetAddress(const GWEN_CRYPTTOKEN_USER *el);
/**
* Set the property @ref GWEN_CRYPTTOKEN_USER_Address
*/
GWENHYWFAR_API void GWEN_CryptToken_User_SetAddress(GWEN_CRYPTTOKEN_USER *el, const char *d);

/**
* Returns the property @ref GWEN_CRYPTTOKEN_USER_Port
*/
GWENHYWFAR_API int GWEN_CryptToken_User_GetPort(const GWEN_CRYPTTOKEN_USER *el);
/**
* Set the property @ref GWEN_CRYPTTOKEN_USER_Port
*/
GWENHYWFAR_API void GWEN_CryptToken_User_SetPort(GWEN_CRYPTTOKEN_USER *el, int d);

/**
* Returns the property @ref GWEN_CRYPTTOKEN_USER_SystemId
*/
GWENHYWFAR_API const char *GWEN_CryptToken_User_GetSystemId(const GWEN_CRYPTTOKEN_USER *el);
/**
* Set the property @ref GWEN_CRYPTTOKEN_USER_SystemId
*/
GWENHYWFAR_API void GWEN_CryptToken_User_SetSystemId(GWEN_CRYPTTOKEN_USER *el, const char *d);

/**
* Returns the property @ref GWEN_CRYPTTOKEN_USER_ContextId
*/
GWENHYWFAR_API GWEN_TYPE_UINT32 GWEN_CryptToken_User_GetContextId(const GWEN_CRYPTTOKEN_USER *el);
/**
* Set the property @ref GWEN_CRYPTTOKEN_USER_ContextId
*/
GWENHYWFAR_API void GWEN_CryptToken_User_SetContextId(GWEN_CRYPTTOKEN_USER *el, GWEN_TYPE_UINT32 d);


#ifdef __cplusplus
} /* __cplusplus */
#endif


#endif /* CRYPTTOKEN_USER_H */
