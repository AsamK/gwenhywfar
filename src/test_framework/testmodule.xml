<?xml?>

<tm2>
  <type id="GWEN_TEST_MODULE" type="pointer">
    <descr>
    </descr>
    <lang id="c" usePrivateConstructor="0" >
      <identifier>GWEN_TEST_MODULE</identifier>
      <prefix>GWEN_Test_Module</prefix>
      <baseFileName>testmodule</baseFileName>
      
      <flags>
        with_inherit
        with_db
        with_tree2
        with_refcount
      </flags>
      
      <headers>
        <header type="sys" loc="pre">gwenhywfar/types.h</header>
      </headers>

      <inlines>


        <inline loc="end" access="public">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <descr>
            Add a test as a submodule below the given module.
          </descr>
          <content>
             $(api) $(struct_type) * $(struct_prefix)_AddTest($(struct_type) *st, const char *tName, GWEN_TEST_MODULE_TEST_FN fn, const char *tDescr);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>
             $(struct_type) * $(struct_prefix)_AddTest($(struct_type) *st, const char *tName, GWEN_TEST_MODULE_TEST_FN fn, const char *tDescr) { \n
               $(struct_type) *mod;                            \n
                                                               \n
               mod=$(struct_prefix)_new();                     \n
               if (tName &amp;&amp; *tName)                    \n
                 $(struct_prefix)_SetName(mod, tName);         \n
               if (tDescr &amp;&amp; *tDescr)                  \n
                 $(struct_prefix)_SetDescription(mod, tDescr); \n
               if (fn)                                         \n
                 GWEN_Test_Module_SetTestFn(mod, fn);          \n
                                                               \n
               $(struct_prefix)_Tree2_AddChild(st, mod);       \n
               return mod;                                     \n
             }
          </content>
        </inline>


        <inline loc="end" access="public">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <descr>
            Add a submodule below the given module.
          </descr>
          <content>
             $(api) $(struct_type) * $(struct_prefix)_AddModule($(struct_type) *st, const char *tName, const char *tDescr);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>
             $(struct_type) * $(struct_prefix)_AddModule($(struct_type) *st, const char *tName, const char *tDescr) { \n
               $(struct_type) *mod;                            \n
                                                               \n
               mod=$(struct_prefix)_new();                     \n
               if (tName &amp;&amp; *tName)                    \n
                 $(struct_prefix)_SetName(mod, tName);         \n
               if (tDescr &amp;&amp; *tDescr)                  \n
                 $(struct_prefix)_SetDescription(mod, tDescr); \n
                                                               \n
               $(struct_prefix)_Tree2_AddChild(st, mod);       \n
               return mod;                                     \n
             }
          </content>
        </inline>


        <inline loc="end" access="public">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <descr>
            Add a submodule below the given module.
          </descr>
          <content>
             $(api) const char* $(struct_prefix)_GetCharParam(const $(struct_type) *st, const char *paramName, const char *defVal);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>
             const char* $(struct_prefix)_GetCharParam(const $(struct_type) *st, const char *paramName, const char *defVal) \n
             {                                                                                                              \n
               assert(st);                                                                                                  \n
               while(st) {                                                                                                  \n
                 if (st->paramsDb) {                                                                                        \n
                   const char *s;                                                                                           \n
                                                                                                                            \n
                   s=GWEN_DB_GetCharValue(st->paramsDb, paramName, 0, NULL);                                                \n
                   if (s)                                                                                                   \n
                     return s;                                                                                              \n
                 }                                                                                                          \n
                 st=$(struct_prefix)_Tree2_GetParent(st);                                                                   \n
               }                                                                                                            \n
                                                                                                                            \n
               return defVal;                                                                                               \n
             }
          </content>
        </inline>


        <inline loc="end" access="public">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <descr>
          </descr>
          <content>
             $(api) void $(struct_prefix)_SetCharParam($(struct_type) *st, const char *paramName, const char *val);
          </content>
        </inline>

        <inline loc="code">
          <typeFlagsMask></typeFlagsMask>
          <typeFlagsValue></typeFlagsValue>
          <content>
             void $(struct_prefix)_SetCharParam($(struct_type) *st, const char *paramName, const char *val)                 \n
             {                                                                                                              \n
               assert(st);                                                                                                  \n
               if (st->paramsDb==NULL)                                                                                      \n
                 st->paramsDb=GWEN_DB_Group_new("params");                                                                  \n
               GWEN_DB_SetCharValue(st->paramsDb, GWEN_DB_FLAGS_OVERWRITE_VARS, paramName, val);                            \n
             }
          </content>
        </inline>


      </inlines>


    </lang>

    <defines>
    </defines>


    <enums>
    </enums>

    <members>
  
      <member name="id" type="uint32_t" maxlen="8">
        <default>0</default>
        <preset>0</preset>
        <flags>with_getbymember</flags>
        <access>public</access>
      </member>

      <member name="name" type="char_ptr" maxlen="128" >
        <default>NULL</default>
        <preset>NULL</preset>
        <access>public</access>
        <flags>own</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>

      <member name="description" type="char_ptr" maxlen="256" >
        <default>NULL</default>
        <preset>NULL</preset>
        <access>public</access>
        <flags>own</flags>
        <setflags>const dup</setflags>
        <getflags>const</getflags>
      </member>


      <member name="result" type="int" maxlen="8">
        <default>0</default>
        <preset>0</preset>
        <flags>none</flags>
        <access>public</access>
      </member>

      <member name="paramsDb" type="GWEN_DB_NODE" >
        <default>NULL</default>
        <preset>NULL</preset>
        <flags>own</flags>
        <access>private</access>
      </member>


    </members>
    

    <virtualFns>
    

      <fn name="test" location="post" >
        <descr>
          Returns the list of ABS_ACCOUNT_INFO objects for all known accounts.
          The caller is responsible for freeing the list returned (if any) via @ref ABS_AccountInfo_List_free.
        </descr>
        <access>public</access>
        <returnType>int</returnType>
        <defaultReturnValue>GWEN_ERROR_NOT_IMPLEMENTED</defaultReturnValue>
        <flags>gwen_cb</flags>
        <params>
          <!--
          <param type="ABS_ACCOUNT_INFO_LIST**"     name="pAccountInfoList" >
            <descr>
              Pointer to a variable receiving the list of account infos.
            </descr>
          </param>
          -->
        </params>
      </fn>


    </virtualFns>
    
    
  </type>
  
</tm2>


