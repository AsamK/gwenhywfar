$Id$



1. Introduction
===============

Well, maybe later ;-)



2. IPC Layers
=============

IPC is divided into several layers.

2.1. Transport Layer
--------------------
This layer actually performs IO operations. There are already transport
layer implementations for TCP and Unix Domain Sockets


2.2. Message Layer
------------------
This layer knows the format of messages transferred via the transport layer.
You need to actually create some functions and set the appropriate pointers
within GWEN_IPCMSGLAYER objects. The following functions should be
overwritten:
- GWEN_IPCMSGLAYER_WORK workFn;
    The called function should read/write/connect/accept according to the
    state of the msgLayer
- GWEN_IPCMSGLAYER_FREE freeDataFn;
    The called function should free its private data stored within the
    msgLayer
- GWEN_IPCMSGLAYER_ACCEPT acceptFn;
    The called function should call GWEN_IPCTransportLayer_Accept and create
    a new msgLayer with the new transportLayer


2.3. Connection Layer
---------------------
This layer handles logical opening and closing of a connection.
All kind of handshaking should be implemented here. Depending on the
implementation there might be encryption/decryption, signing and verifying
in this layer.
You need to actually create some functions and set the appropriate pointers
within GWEN_IPCCONNLAYER objects. The following functions should be
overwritten:
- GWEN_IPCCONNLAYER_FREE freeDataFn;
    The called function should free its private data stored within the
    msgLayer
- GWEN_IPCCONNLAYER_OPEN openFn;
    The called function should connect to the peer and initiate the
    handshaking. 
    However, the handshaking itself should be done in the workFn function
    described below.
- GWEN_IPCCONNLAYER_CLOSE closeFn;
    This function may send a final disconnect message to the peer. It should
    then call the disconnect function of the next lower layer and free all
    ressources associated with this connection.
- GWEN_IPCCONNLAYER_WORK workFn;
    The called function should read/write/connect/accept according to the
    state of the connectionLayer
- GWEN_IPCCONNLAYER_ACCEPT acceptFn;
    The called function should call GWEN_MsgLayer_Accept and create
    a new connectionLayer with the new msgLayer


2.4. Service Layer
------------------
This layer is the one which is used most by applications. It allows sending
and receiving of messages, adding and closing of connections and so on.



3. Application's Point of View
==============================

The application needs to create all the layers from the lowest to the highest
(in this order):
- choose the transport layer
- choose the message layer
- choose the connection layer

The constructor of each layer takes a pointer to the next lower layer as an
argument.



