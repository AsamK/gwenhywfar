<?xml?>

<tm2>

  <typedef id="GWEN_BINDATA" type="opaque" lang="c" >
    <identifier>GWEN_BINDATA</identifier>

    <codedefs>

      <codedef id="construct">
        <code>
          $(dst).pointer=NULL;
          $(dst).length=0;
        </code>
      </codedef>

      <codedef id="destruct">
        <code>
          if ($(src).length &amp;&amp; $(src).pointer) {
            free($(src).pointer);
            $(src).pointer=NULL;
            $(src).length=0;
          }
        </code>
      </codedef>

      <codedef id="assign">
        <code>
          $(dst).pointer=$(src).pointer;
          $(dst).length=$(src).length;
        </code>
      </codedef>

      <codedef id="dup">
        <code>
          if ($(src).length &amp;&amp; $(src).pointer) {
            free($(dst).pointer);
            $(dst).pointer=(uint8_t*) malloc($(src).length);
            if ($(dst).pointer) {
              $(dst).length=$(src).length;
              memmove($(dst).pointer, $(src).pointer, $(src).length);
            }
            else {
              $(dst).pointer=NULL;
              $(dst).length=0;
            }
          }
        </code>
      </codedef>

      <codedef id="compare">
        <code>
          if (($(src).length == $(dst).length) &amp;&amp; $(src).pointer  &amp;&amp; $(dst).pointer  )
            $(retval)=memcmp($(src).pointer, $(dst).pointer, $(maxlen));
          else if ($(src).length>$(dst).length)
            $(retval)=1;
          else if ($(dst).length>$(src).length)
            $(retval)=-1;
          else
            $(retval)=0;
        </code>
      </codedef>

      <codedef id="toXml">
        <code>
        </code>
      </codedef>

      <codedef id="fromXml">
        <code>
        </code>
      </codedef>

      <codedef id="toDb">
        <code>
        </code>
      </codedef>



      <codedef id="fromDb">
        <code>
        </code>
      </codedef>



      <codedef id="toObject">
        <code>
        </code>
      </codedef>



      <codedef id="fromObject">
        <code>
        </code>
      </codedef>



      <codedef id="toHashString">
        <code>
        </code>
      </codedef>

    </codedefs>



    <defaults>
      <!-- defaults flags etc for member declarations of this type -->
      <default>NULL</default>
      <setflags>assign</setflags>
      <getflags>none</getflags>
      <dupflags>const</dupflags>
    </defaults>
    
  </typedef>

</tm2>
