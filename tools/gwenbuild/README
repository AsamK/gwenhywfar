
https://docencia.ac.upc.edu/FIB/USO/Bibliografia/unix-c-libraries.html


  Context (tree):
  - refCounter
  - folder
  - defines
  - includes
  - environment vars (CFLAGS etc)
  - vars (prefix, project_so_current etc)
  
  File:
  - id
  - name
  - type (c, cpp, tm2, obj, asm, nvcpp, resource, const)
  - generator (ccompiler, typemaker2, linker etc)
  - flags: dist, built
  - installToFolder
  - pointer to context

  - runtimeFlags: built_in_this_session
  - stat: datetime
  - FILE_LIST2 *blockingFiles;
  - FILE_LIST2 *blockedFiles;
  - FILE_LIST2 *dependecies;
  

 Build dependecies:
   cc -E -I INCLUDE_FOLDER -M -MF DEPOUTFILE SRCFILE

Immer im build-dir kompilieren/builden



Reading files:


- project
  - options
  - dependencies
  - checkHeaders
  - checkFunctions

  - subdirs (ContextWechsel)
  - target (ContextWechsel)
    - includes   ->context
    - defines    ->context
    - sources    ->context
    - headers    ->context
    - data       ->context
    - libraries  ->target
    - useTargets ->target
    - ifOptionContains etc


Context-Aenderung:
- bei enter eines <subdirs>:
  - neuen Context erstellen
    - newCtx->topBuildDir=SUBDIR+oldCtx->topBuildDir
    - newCtx->topSourceDir=SUBDIR+oldCtx->topSourceDir
    - newCtx->currentBuildDir=oldCtx->currentBuildDir+"/"+SUBDIR
    - newCtx->currentSourceDir=oldCtx->currentSourceDir+"/"+SUBDIR
    - clear includeList
    - clear defineList
    - copy vars
    - clear sourceFileList2
    - copy currentTarget
- bei beginn eines <target>
  - neuen Context erstellen
    - copy all
    - clear includeList
    - clear defineList
    - clear sourceFileList2
    - set new target


main structure:
- list2<FILE>
- tree2<CONTEXT>
- list2<TARGET>
- db fuer deps, globale variablen wie:
  - prefix
  - deps
  - options


beim erzeugen eines builders:
- ermittle Dateien fuer getOutputFiles() anhand der inputs
- fuege diese Dateien der list main->files hinzu, erzeuge id etc



Durchgang:
- alle Contexte und targets sammeln


Durchgang
- fuer jedes Target:
  - erzeuge builder
  
- fuer jeden Context unterhalb des Target:
  - fuer jedes SourceFile
    - target->builder->isAcceptableInput()?
      - ja: target->builder->addInput(FILE)
      - nein: 
        - erzeuge builder nach quelldateityp
        - fuer jedes (builder->getOutputFiles())
          - add to current SourceFile list

- fuer jedes Target:
    - usedTargetList?
      - fuer jedes usedTarget:
        - ConvenienceLib oder installLib?
          - ja:
            - schon in der stringlist?
              - ja: circular dependency, FEHLER!
              - nein: 
              - dep->builder->outputFileList()->empty?
                - ja:
                 - dep->builder->generateOutputFileList()
              - fuege als inputFile zum aktuellen Builder hinzu: dep->builder->outputFileList->Front()
          - nein: FEHLER!
    - builder->generateOutputFileList()

- fuer jeden builder:
  - erzeuge buildcmd



Durchgang: Handle used targets
- fuer jedes Target:
  - fuer jedes usedTarget
    - erstes (usedTarget->builder->getOutputFiles())
      - file->addWaitingBuilder(target->builder)
      - target->builder->incBlockingFiles()


<-------- we are here


Durchgang
- fuer jeden buildCmd
  - fuer jedes inputFile
    - flags::generated?
      - file->addWaitingBuildCmd(buildCmd)
      - buildcmd->incBlockingFiles()


Durchgang
- fuer jeden Builder
  - blockingFiles==0?
    ja: add to runnableBuilderList


Durchgang (tatsaechliches bauen)
  - fuer jeden builder in runnableBuilderList
    - builder->run()
    - fuer jedes builder->getOutputFiles()
      - fuer jeden file->getWaitingBuilders()
        - builder->decBlockingFiles()
        - builder->blockingFiles==0?
          ja: add builder to runnableBuilderList
        - file->removeWaitingBuilder
        
      
Am Ende nur noch:
- list<builder>
- list<file>
Nur diese Objects muessen gespeichert werden fuers Compilieren.
In den Buildern schon die Kommandozeilen speichern.
Der Rest muss dann nicht mehr geladen werden.



Builders
========

SharedLibBuilder
- input: *.o
- output:*.so.x.y.z


StaticLibBuilder
- input:  *.o
- output: *.a

CBuilder:
- input: *.c
- output: *.o

CxxBuilder:
- input: *.cpp
- output: *.o

Tm2Builder:
- input: *.t2d
- output: *.c, *.h


Virtual functions
- setupOutputFiles() [call after adding last input file]
- isAcceptableInput(const FILE *f)
- prepare()
  - c, cxx: do nothing
  - tm2: create definition files only
- run()
  - generate arguments
  - get build path, cd into it
  - run command


  Builder: 
  - destType
  - srcType
  - makeFile(BUILDER, FILE)
  - addDeps(BUILDER, FILE)
  
  Example builders:
  - tm2_to_c_h_tm2
  - c_to_obj
  - obj_to_so
  - obj_to_a
  - res_to_c


# shared lib:
gcc -shared -nostdlib -o libaqdiagram.so aqdiagram.o -lgwenhywfar -lgmp -Wl,--whole-archive draw/libaqdg_draw.a



TODO:
- Symbol Visibility verwenden
- Dependency Tracking einbauen
- SharedLib implementieren
- Program implementieren
- DIST implementieren (tarball bauen)





- QUEUES:
  - waiting
  - running
  - runnable
  - finished

- fuer jedes BuildCmd in runningQueue:
  - process?
    - process running?
      - nein:
      . - remove from runningQueue
      . - SetProcess(NULL)
      . - exited?
      .   - ja:
      .   . - currentCommand: more?
      .   .   - ja:
      .   .   . - setCurrentCommand(next)
      .   .   . - move to runnableQueue   
      .   .   - nein: 
      .   .     - move to finishedQueue
      .   .     - fuer jedes OutputFile
      .   .       - fuer jedes WaitingBuildCommand:
      .   .         - WaitingBuildCommand->decBlockingFile
      .   .           - 0?
      .   .             - move WaitingBuildCommand ->runnableCommands
      .   .
      .   .     
      .   - nein:
      .     - move to finishedQueue
      - ja:
        - nothing to change


TODO: populate target->usedTargetLinkSpecList
